# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: build and deployment

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  app_name: playground

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "pnpm"
      - run: pnpm i
      - run: pnpm run build

      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: upload
        run: |
          rsync -av --delete-before \
            .next/standalone/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:apps/${{ env.app_name }}/
          rsync -av \
            .next/static/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:apps/${{ env.app_name }}/.next/static/

      - name: start container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            sudo docker stop ${{ env.app_name }}; \
            sudo docker rm ${{ env.app_name }}; \
            sudo docker run --name ${{ env.app_name }} -ti -d --volume "`pwd`/apps/${{ env.app_name }}:/app" --workdir /app --expose 3000 node:18-alpine server.js
          '
